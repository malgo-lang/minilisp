module Main = {
  module {..} = import Builtin;
  module {..} = import Prelude;

  ---------------
  -- Utilities --
  ---------------

  infixr 6 (<>);
  (<>) : String -> String -> String;
  (<>) = appendString; 

  ------------
  -- Parser --
  ------------

  -- parser that written in CPS
  type Source = String;
  type Parser r a = (a -> Source -> Maybe (r, Source)) -> Source -> Maybe (r, Source);

  -- single character
  item : Parser r Char;
  item = { k inp ->
    (headString inp, tailString inp)
    |> { (Nothing, _) -> Nothing
       | (Just c, cs) -> k c cs
       }
  };

  -- a character that satisfy `p`
  sat : (Char -> Bool) -> Parser r Char;
  sat = { p k ->
    with c = item; 
    if (p c) { k c } { const Nothing }
  };

  -- give up parsing
  fail : Parser r a;
  fail = { _ -> const Nothing };

  -- [0-9]
  digit : Parser r Char;
  digit = sat isDigit;

  digitToInt : Char -> Int32;
  digitToInt = { d -> subInt32 (ordChar d) (ordChar '0') };

  -- [a-z]
  lower : Parser r Char;
  lower = sat isLower;

  -- [A-Z]
  upper : Parser r Char;
  upper = sat isUpper;

  -- alphabet or digit
  alphanum : Parser r Char;
  alphanum = sat isAlphanum;

  -- map function over a parser
  mapParser : (a -> b) -> Parser r a -> Parser r b;
  mapParser = { f p k ->
    with x = p;
    k (f x)
  };

  -- expect the character `x`
  char : Char -> Parser r Char;
  char = { x -> sat (eqChar x) };

  -- choice operator
  infixl 3 (<|>);
  (<|>) : Parser r a -> Parser r a -> Parser r a;
  (<|>) = { p q k inp ->
    p { x cs -> k x cs } inp -- pが成功すればkを実行する
    |> { Nothing -> q k inp -- pが失敗すればq kを実行する
       | Just (x, cs) -> Just (x, cs) } -- kの実行結果はそのまま返す
  };

  -- try `p` zero or more times
  many : Parser r a -> Parser r (List a);
  many = { p ->
    { k -> with x = p;
           with xs = many p;
           k (Cons x xs)
    } <|> { k -> k Nil }
  };

  -- try `p` one or more times
  some : Parser r a -> Parser r (List a);
  some = { p ->
    { k -> with x = p;
           with xs = many p;
           k (Cons x xs)
    }
  };

  -- [a-z][a-zA-Z0-9]
  ident : Parser r String;
  ident = { k ->
    with c = lower;
    with cs = many alphanum;
    k (listToString (Cons c cs))
  };

  -- [0-9]+
  nat : Parser r Int32;
  nat = { k ->
    with ds = some (mapParser digitToInt digit);
    let shiftAdd = { m n -> addInt32 (mulInt32 10 m) n};
    k (foldl shiftAdd 0 ds)
  };

  -- -?[0-9]+
  int : Parser r Int32;
  int = { k ->
    let op = { k -> with _ = char '-'; k (subInt32 0) } <|> { k -> k identity };
    with f = op;
    with n = nat;
    k (f n)
  };

  -- skip some spaces
  space : Parser r ();
  space = { k ->
    with _ = many (sat isWhiteSpace);
    k ()
  };

  -- skip some spaces and execute `p`
  token : Parser r a -> Parser r a;
  token = { p k ->
    with _ = space;
    with x = p;
    with _ = space;
    k x
  };

  ------------------
  -- s-expression --
  ------------------

  data SExpr = Symbol String
             | SInt Int32
             | SList (List SExpr);

  showSExpr : SExpr -> String;
  showSExpr =
    { Symbol str -> "Symbol " <> str
    | SInt int -> "SInt " <> toStringInt32 int
    | SList ss -> "SList [" <> concatString (punctuate ", " (mapList showSExpr ss)) <> "]"
    };

  symbol : Parser r SExpr;
  symbol = token { k ->
    with x = lower <|> upper <|> char '_';
    with xs = many (lower <|> upper <|> digit <|> char '_');
    k (Symbol (listToString (Cons x xs)))
  };

  sint : Parser r SExpr;
  sint = mapParser SInt (token int);

  slist = { k ->
    with _ = token (char '(');
    with xs = many expr;
    with _ = token (char ')');
    k (SList xs)
  };

  expr = symbol <|> sint <|> slist;

  ----------
  -- Eval --
  ----------

  data Value = VSymbol String
             | VInt Int32
             | VCons Value Value
             | VFunc (List Value -> Value)
             | VSpecial (Env -> List SExpr -> Value)
             | VNil;

  showValue : Value -> String;
  showValue =
    { VSymbol x -> x
    | VInt x -> toStringInt32 x
    | VCons x y -> "(" <> showValue x <> " . " <> showValue y <> ")"
    | VFunc _ -> "<closure>"
    | VSpecial _ -> "<special>"
    | VNil -> "nil"
    };

  type Env = List (String, Value);

  lookupList =
    { Nil _ -> Nothing
    | (Cons (k, v) env) n -> if (eqString k n) { Just v } { lookupList env n }
    };

  appendList =
    { Nil ys -> ys
    | (Cons x xs) ys -> Cons x (appendList xs ys)
    };

  zip =
    { Nil _ -> Nil
    | _ Nil -> Nil
    | (Cons x xs) (Cons y ys) -> Cons (x, y) (zip xs ys)
    };
    
  globalEnv = [
    ("nil", VNil),
    ("atom",
     VFunc { [VSymbol _] -> VSymbol "t"
           | [VInt _] -> VSymbol "t"
           | [VNil] -> VSymbol "t"
           | _ -> VNil
           }), 
    ("eq",
     VFunc { [VSymbol x, VSymbol y] -> if (eqString x y) { VSymbol "t" } { VNil }
           | [VInt x, VInt y] -> if (eqInt32 x y) { VSymbol "t" } { VNil }
           | [VNil, VNil] -> VSymbol "t"
           | _ -> VNil
     }),
    ("cons",
     VFunc { [x, y] -> VCons x y
           | _ -> VNil
     }),
    ("let",
     VSpecial { env [Symbol x, expr1, expr2] -> eval (Cons (x, eval env expr1) env) expr2
              | _ _ -> panic "invalid form"
     }),
    ("lambda",
     VSpecial {
         env [SList ps, body] ->
           let params = mapList { Symbol p -> p | _ -> panic "invalid form" } ps;
           VFunc { args ->
             eval (appendList (zip params args) env) body
           }
       | _ _ -> panic "invalid form"
     })
  ];

  eval : Env -> SExpr -> Value;
  eval =
    { env (Symbol s) ->
        case (lookupList env s) {
        | Nothing -> VSymbol s -- if `s` is not defined, return `s` itself
        | Just v -> v
        }
    | _ (SInt x) -> VInt x
    | env (SList (Cons x xs)) ->
        case (eval env x) {
        | VFunc f -> f (mapList (eval env) xs)
        | VSpecial f -> f env xs
        | _ -> panic "x is not function or special form"
        }
    | _ _ -> panic "not supported"
    };

  main : { () };
  main = { 
    let src = getContents ();
    let parser = expr;

    case (parser { a cs -> Just (a, cs) } src) {
    | Nothing -> putStrLn "Nothing"
    | Just (x, cs) ->
        putStrLn "parsed:";
        putStrLn (showSExpr x);
        putStrLn "rest:";
        putStrLn cs;
        putStrLn "evaluated:";
        putStrLn (showValue (eval globalEnv x))
    }
  };
}
